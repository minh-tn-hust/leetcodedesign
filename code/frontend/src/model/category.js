const ProblemCategory = {
    all : "All",
    array : "Array",
    string : "String",
    hashtable : "HashTable",
    dynamicprogramming : "Dynamic Programming",
    math : "Math",
    greedy : "Greedy",
    sorting : "Sorting",
    depthfirstsearch : "Depth First Search",
    binarysearch : "Binary Search",
    database : "Database",
    breadthfirstsearch : "Breadth First Search",
    tree : "Tree",
    matrix : "Matrix",
    twopointers : "Two Pointers",
    binarytree : "Binary Tree",
    bitmanipulation : "Bit Manipulation",
    heap : "Heap",
    stack : "Stack",
    prefixsum : "Prefix Sum",
    graph : "Graph",
    design : "Design",
    simulation : "Simulation",
    counting : "Counting",
    backtracking : "Backtracking",
    slidingwindow : "Sliding Window",
    unionfind : "Union Find",
    linkedlist : "Linked List",
    orderedset : "Ordered Set",
    monotonicstack : "Monotonic Stack",
    enumeration : "Enumeration",
    recursion : "Recursion",
    trie : "Trie",
    divideandconquer : "Divide And Conquer",
    binarysearchtree : "Binary Search Tree",
    bitmask : "Bitmask",
    queue : "Queue",
    numbertheory : "Number Theory",
    segmenttree : "Segment Tree",
    memoization : "Memoization",
    geometry : "Geometry",
    topologicalsort : "Topological Sort",
    binaryindexedtree : "Binary Indexed Tree",
    hashfunction : "Hash Function",
    gametheory : "Game Theory",
    shortestpath : "Shortest Path",
    combinatorics : "Combinatorics",
    datastream : "Data Stream",
    interactive : "Interactive",
    stringmatching : "String Matching",
    rollinghash : "Rolling Hash",
    brainteaser : "Brainteaser",
    randomized : "Randomized",
    monotonicqueue : "Monotonic Queue",
    mergesort : "Merge Sort",
    iterator : "Iterator",
    concurrency : "Concurrency",
    doublylinkedlist : "Doubly Linked List",
    probabilityandstatistics : "Probability And Statistics",
    quickselect : "Quickselect",
    bucketsort : "Bucket Sort",
    suffixarray : "Suffix Array",
    minimumspanningtree : "Minimum Spanning Tree",
    countingsort : "Counting kSort",
    shell : "Shell",
    linesweep : "Line Sweep",
    reservoirsampling : "Reservoir Sampling",
    euleriancircuit : "Eulerian Circuit",
    radixsort : "Radix Sort",
    stronglyconnectedcomponent : "Strongly Connected Component",
    rejectionsampling : "Rejection Sampling",
    biconnectedcomponent : "Biconnected Component"
};

const CategoryKey = Object.keys(ProblemCategory);

export {
    CategoryKey,
    ProblemCategory
}